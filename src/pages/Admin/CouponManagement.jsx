import { useState, useEffect, useRef } from "react";
import axios from "axios";
import { InputText } from "primereact/inputtext";
import { Button } from "primereact/button";
import { DataTable } from "primereact/datatable";
import { Column } from "primereact/column";
import { Dialog } from "primereact/dialog";
import { InputNumber } from "primereact/inputnumber";
import { Checkbox } from "primereact/checkbox";
import { Toast } from "primereact/toast"; // Import Toast

export default function CouponManagement() {
  const [searchTerm, setSearchTerm] = useState("");
  const [coupons, setCoupons] = useState([]);
  const [dialogVisible, setDialogVisible] = useState(false);
  const [editDialogVisible, setEditDialogVisible] = useState(false);
  const [deleteDialogVisible, setDeleteDialogVisible] = useState(false);
  const [couponToDelete, setCouponToDelete] = useState(null);
  const [couponData, setCouponData] = useState({
    id: "",
    code: "",
    value: 0,
    description: "",
    usagelimit: 0,
    isactive: true,
  });

  const toast = useRef(null); // S·ª≠ d·ª•ng Toast

  // L·∫•y danh s√°ch m√£ gi·∫£m gi√° t·ª´ API
  const fetchCoupons = async () => {
    try {
      const response = await axios.get(
        "https://localhost:7274/api/admin/AdminCoupon"
      );
      setCoupons(response.data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch m√£ gi·∫£m gi√°:", error);
      toast.current.show({
        severity: "error",
        summary: "L·ªói",
        detail: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√£ gi·∫£m gi√°.",
        life: 3000,
      });
    }
  };

  useEffect(() => {
    fetchCoupons();
  }, []);

  // H√†m validate d·ªØ li·ªáu m√£ gi·∫£m gi√°
  // H√†m validate d·ªØ li·ªáu m√£ gi·∫£m gi√°
  const validateCoupon = (coupon) => {
    if (!coupon.code) {
      toast.current.show({
        severity: "error",
        summary: "L·ªói",
        detail: "M√£ gi·∫£m gi√° kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.",
        life: 3000,
      });
      return false;
    }

    if (!coupon.value && coupon.value !== 0) {
      toast.current.show({
        severity: "error",
        summary: "L·ªói",
        detail: "Gi√° tr·ªã gi·∫£m gi√° kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.",
        life: 3000,
      });
      return false;
    }

    if (coupon.value < 0) {
      toast.current.show({
        severity: "error",
        summary: "L·ªói",
        detail: "Gi√° tr·ªã gi·∫£m gi√° kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n 0.",
        life: 3000,
      });
      return false;
    }

    if (!coupon.description) {
      toast.current.show({
        severity: "error",
        summary: "L·ªói",
        detail: "M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.",
        life: 3000,
      });
      return false;
    }

    if (!coupon.usageLimit && coupon.usageLimit !== 0) {
      toast.current.show({
        severity: "error",
        summary: "L·ªói",
        detail: "Gi·ªõi h·∫°n s·ª≠ d·ª•ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.",
        life: 3000,
      });
      return false;
    }

    if (coupon.usageLimit <= 0) {
      toast.current.show({
        severity: "error",
        summary: "L·ªói",
        detail: "Gi·ªõi h·∫°n s·ª≠ d·ª•ng ph·∫£i l·ªõn h∆°n 0.",
        life: 3000,
      });
      return false;
    }

    return true;
  };

  // Th√™m m√£ gi·∫£m gi√°
  const saveCoupon = async () => {
    if (!validateCoupon(couponData)) return; // Th√™m ki·ªÉm tra validate
    try {
      await axios.post(
        "https://localhost:7274/api/admin/AdminCoupon",
        couponData
      );
      fetchCoupons();
      setDialogVisible(false);
      toast.current.show({
        severity: "success",
        summary: "Th√†nh c√¥ng",
        detail: "M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.",
        life: 3000,
      });
    } catch (error) {
      if (error.response) {
        toast.current.show({
          severity: "error",
          summary: "L·ªói",
          detail: error.response.data,
          life: 3000,
        });
      } else {
        console.error("L·ªói khi th√™m m√£ gi·∫£m gi√°:", error);
      }
    }
  };

  // C·∫≠p nh·∫≠t m√£ gi·∫£m gi√°
  const updateCoupon = async () => {
    if (!validateCoupon(couponData)) return; // Th√™m ki·ªÉm tra validate
    try {
      await axios.put(
        `https://localhost:7274/api/admin/AdminCoupon/${couponData.id}`,
        couponData
      );
      fetchCoupons();
      setEditDialogVisible(false);
      toast.current.show({
        severity: "success",
        summary: "Th√†nh c√¥ng",
        detail: "M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
        life: 3000,
      });
    } catch (error) {
      if (error.response) {
        toast.current.show({
          severity: "error",
          summary: "L·ªói",
          detail: error.response.data,
          life: 3000,
        });
      } else {
        console.error("L·ªói khi c·∫≠p nh·∫≠t m√£ gi·∫£m gi√°:", error);
      }
    }
  };

  // X√≥a m√£ gi·∫£m gi√°
  const deleteCoupon = async () => {
    try {
      await axios.delete(
        `https://localhost:7274/api/admin/AdminCoupon/${couponToDelete.id}`
      );
      fetchCoupons();
      setDeleteDialogVisible(false);
      setCouponToDelete(null);
      toast.current.show({
        severity: "success",
        summary: "Th√†nh c√¥ng",
        detail: "M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c x√≥a.",
        life: 3000,
      });
    } catch (error) {
      console.error("L·ªói khi x√≥a m√£ gi·∫£m gi√°:", error);
      toast.current.show({
        severity: "error",
        summary: "L·ªói",
        detail: "Kh√¥ng th·ªÉ x√≥a m√£ gi·∫£m gi√°.",
        life: 3000,
      });
    }
  };

  const filteredCoupons = coupons.filter(
    (coupon) =>
      coupon.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
      coupon.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const openNewCouponDialog = () => {
    setCouponData({
      code: "",
      value: 0,
      description: "",
      usagelimit: 0,
      isactive: true,
    });
    setDialogVisible(true);
  };

  const editCoupon = (coupon) => {
    setCouponData(coupon);
    setEditDialogVisible(true);
  };

  const confirmDeleteCoupon = (coupon) => {
    setCouponToDelete(coupon);
    setDeleteDialogVisible(true);
  };

  const actionTemplate = (rowData) => (
    <div className="flex gap-3">
      <Button
        icon="pi pi-pencil"
        className="p-button-lg rounded-xl bg-yellow-400 border border-yellow-500 text-white hover:bg-yellow-500 px-4 py-2"
        tooltip="S·ª≠a m√£"
        onClick={() => editCoupon(rowData)}
      />
      <Button
        icon="pi pi-trash"
        className="p-button-lg rounded-xl bg-red-500 border border-red-600 text-white hover:bg-red-600 px-4 py-2"
        tooltip="X√≥a m√£"
        onClick={() => confirmDeleteCoupon(rowData)}
      />
    </div>
  );

  return (
    <div className="p-6 bg-white shadow-lg rounded-xl">
      <Toast ref={toast} /> {/* Th√™m Toast ·ªü ƒë√¢y */}
      <h2 className="text-3xl font-bold text-gray-700 mb-6 text-center md:text-left">
        üéüÔ∏è Qu·∫£n l√Ω m√£ gi·∫£m gi√°
      </h2>
      <div className="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
        <InputText
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="üîç T√¨m ki·∫øm m√£ gi·∫£m gi√°..."
          className="p-inputtext-lg border border-gray-400 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full md:w-1/2 px-4 py-3 text-lg"
        />
        <Button
          label="Th√™m m√£ m·ªõi"
          icon="pi pi-plus"
          className="p-button-xl rounded-xl text-white bg-gradient-to-r from-green-400 to-green-600 hover:from-green-500 hover:to-green-700 shadow-lg px-6 py-3 text-lg w-full md:w-auto"
          onClick={openNewCouponDialog}
        />
      </div>
      <div className="overflow-x-auto">
        <DataTable
          value={filteredCoupons}
          paginator
          rows={5}
          className="shadow-md rounded-lg text-sm md:text-lg"
          scrollable
        >
          <Column field="id" header="M√£ Coupon" />
          <Column field="code" header="M√£ Gi·∫£m Gi√°" />
          <Column field="value" header="Gi√° Tr·ªã" />
          <Column field="description" header="M√¥ T·∫£" />
          <Column field="usageLimit" header="Gi·ªõi H·∫°n S·ª≠ D·ª•ng" />
          <Column
            field="isactive"
            header="Tr·∫°ng Th√°i"
            body={(rowData) => (
              <span
                className={
                  rowData.isActive
                    ? "text-green-600 font-bold"
                    : "text-red-500 font-bold"
                }
              >
                {rowData.isActive ? "Ho·∫°t ƒë·ªông" : "V√¥ hi·ªáu"}
              </span>
            )}
          />
          <Column header="H√†nh ƒë·ªông" body={actionTemplate} />
        </DataTable>
      </div>
      {/* Dialog th√™m m√£ m·ªõi */}
      <Dialog
        header="üÜï Th√™m M√£ Gi·∫£m Gi√°"
        visible={dialogVisible}
        style={{ width: "450px" }}
        onHide={() => setDialogVisible(false)}
        footer={
          <div className="flex justify-end gap-3">
            <Button label="H·ªßy" onClick={() => setDialogVisible(false)} />
            <Button label="L∆∞u" onClick={saveCoupon} />
          </div>
        }
      >
        <FormCoupon couponData={couponData} setCouponData={setCouponData} />
      </Dialog>
      {/* Dialog ch·ªânh s·ª≠a m√£ */}
      <Dialog
        header="‚úèÔ∏è Ch·ªânh S·ª≠a M√£ Gi·∫£m Gi√°"
        visible={editDialogVisible}
        style={{ width: "450px" }}
        onHide={() => setEditDialogVisible(false)}
        footer={
          <div className="flex justify-end gap-3">
            <Button label="H·ªßy" onClick={() => setEditDialogVisible(false)} />
            <Button label="C·∫≠p Nh·∫≠t" onClick={updateCoupon} />
          </div>
        }
      >
        <FormCoupon couponData={couponData} setCouponData={setCouponData} />
      </Dialog>
      {/* Dialog x√°c nh·∫≠n x√≥a */}
      <Dialog
        header="üóëÔ∏è X√°c Nh·∫≠n X√≥a"
        visible={deleteDialogVisible}
        style={{ width: "450px" }}
        onHide={() => setDeleteDialogVisible(false)}
        footer={
          <div className="flex justify-end gap-3">
            <Button label="H·ªßy" onClick={() => setDeleteDialogVisible(false)} />
            <Button
              label="X√≥a"
              className="p-button-danger"
              onClick={deleteCoupon}
            />
          </div>
        }
      >
        <p>
          B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√£ gi·∫£m gi√° {couponToDelete?.code} kh√¥ng?
        </p>
      </Dialog>
    </div>
  );
}

function FormCoupon({ couponData, setCouponData }) {
  return (
    <div className="flex flex-col gap-4">
      <label>M√£ Gi·∫£m Gi√°</label>
      <InputText
        value={couponData.code}
        onChange={(e) => setCouponData({ ...couponData, code: e.target.value })}
        placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
        className="p-inputtext-lg border border-gray-300 rounded-lg w-full px-4 py-3"
      />

      <label>Gi√° Tr·ªã Gi·∫£m Gi√°</label>
      <InputNumber
        value={couponData.value}
        onValueChange={(e) => setCouponData({ ...couponData, value: e.value })}
        placeholder="Nh·∫≠p gi√° tr·ªã gi·∫£m gi√°"
        className="p-inputtext-lg border border-gray-300 rounded-lg w-full px-4 py-3"
      />

      <label>M√¥ T·∫£</label>
      <InputText
        value={couponData.description}
        onChange={(e) =>
          setCouponData({ ...couponData, description: e.target.value })
        }
        placeholder="Nh·∫≠p m√¥ t·∫£"
        className="p-inputtext-lg border border-gray-300 rounded-lg w-full px-4 py-3"
      />

      <label>Gi·ªõi H·∫°n S·ª≠ D·ª•ng</label>
      <InputNumber
        value={couponData.usageLimit}
        onValueChange={(e) =>
          setCouponData({ ...couponData, usageLimit: e.value })
        }
        placeholder="Nh·∫≠p s·ªë l·∫ßn s·ª≠ d·ª•ng t·ªëi ƒëa"
        className="p-inputtext-lg border border-gray-300 rounded-lg w-full px-4 py-3"
      />

      <div className="flex items-center gap-3">
        <Checkbox
          inputId="isActive"
          checked={couponData.isActive}
          onChange={(e) =>
            setCouponData({ ...couponData, isActive: e.checked })
          }
        />
        <label htmlFor="isActive" className="text-lg">
          K√≠ch ho·∫°t m√£
        </label>
      </div>
    </div>
  );
}
